#ifndef _CONFIG_H_
#define _CONFIG_H_

/***********************************************/
#define VERBOSE_LEVEL               0 // 0 for nothing
#define VERBOSE_TXNLV               1
#define VERBOSE_TXNLV_UPDATE        2
#define VERBOSE_LOCKTABLE_TXNLV_UPDATE  4
#define VERBOSE_SQL_CONTENT         8
/***********************************************/


/***********************************************/
// Simulation + Hardware
/***********************************************/
#define THREAD_CNT				 	6
#define PART_CNT					1 
// each transaction only accesses 1 virtual partition. But the lock/ts manager and index are not aware of such partitioning. VIRTUAL_PART_CNT describes the request distribution and is only used to generate queries. For HSTORE, VIRTUAL_PART_CNT should be the same as PART_CNT.
#define VIRTUAL_PART_CNT			1
#define PAGE_SIZE					4096 
#define CL_SIZE						64
// CPU_FREQ is used to get accurate timing info 
#define CPU_FREQ 2.2

// # of transactions to run for warmup
#define WARMUP						0
// YCSB or TPCC
#define WORKLOAD TPCC
// print the transaction latency distribution
#define PRT_LAT_DISTR				false
#define STATS_ENABLE				true
// 0 for only analysis related
// 1 for debug
// 2 for verbose
#define STAT_VERBOSE				1
#define COLLECT_LATENCY				false
#define TIME_ENABLE					true 

#define MEM_ALLIGN					8 

// [THREAD_ALLOC]
#define THREAD_ALLOC				false
#define THREAD_ARENA_SIZE			(1UL << 22) 
#define MEM_PAD 					true

// [PART_ALLOC] 
#define PART_ALLOC 					false
#define MEM_SIZE					(1UL << 30) 
#define NO_FREE						false

/***********************************************/
// Concurrency Control
/***********************************************/
// WAIT_DIE, NO_WAIT, DL_DETECT, TIMESTAMP, MVCC, HEKATON, HSTORE, OCC, VLL, TICTOC, SILO
// TODO TIMESTAMP does not work at this moment
#define CC_ALG SILO
#define ISOLATION_LEVEL 			SERIALIZABLE

#define USE_LOCKTABLE false
#define LOCKTABLE_MODIFIER			(10003) // (256)
#define LOCKTABLE_INIT_SLOTS		(0)
// all transactions acquire tuples according to the primary key order.
#define KEY_ORDER					false
// transaction roll back changes after abort
#define ROLL_BACK					true
// per-row lock/ts management or central lock/ts management
#define CENTRAL_MAN					false
#define BUCKET_CNT					31
#define ABORT_PENALTY 				100000
#define ABORT_BUFFER_SIZE			10
#define ABORT_BUFFER_ENABLE			true
// [ INDEX ]
#define ENABLE_LATCH				false
#define CENTRAL_INDEX				false
#define CENTRAL_MANAGER 			false
#define INDEX_STRUCT				IDX_HASH
#define BTREE_ORDER 				16

// [DL_DETECT] 
#define DL_LOOP_DETECT				1000 	// 100 us
#define DL_LOOP_TRIAL				100	// 1 us
#define NO_DL						KEY_ORDER
#define TIMEOUT						1000000 // 1ms
// [TIMESTAMP]
#define TS_TWR						false
#define TS_ALLOC					TS_CAS
#define TS_BATCH_ALLOC				false
#define TS_BATCH_NUM				1
// [MVCC]
// when read/write history is longer than HIS_RECYCLE_LEN
// the history should be recycled.
//#define HIS_RECYCLE_LEN				10
//#define MAX_PRE_REQ					1024
//#define MAX_READ_REQ				1024
#define MIN_TS_INTVL				5000000 //5 ms. In nanoseconds
// [OCC]
#define MAX_WRITE_SET				10
#define PER_ROW_VALID				true
// [TICTOC]
#define WRITE_COPY_FORM				"data" // ptr or data
#define TICTOC_MV					false
#define WR_VALIDATION_SEPARATE		true
#define WRITE_PERMISSION_LOCK		false
#define ATOMIC_TIMESTAMP			false
#define TIMESTAMP_SYNC_EPOCH		100  // ms
// [TICTOC, SILO]
#define VALIDATION_LOCK				"no-wait" // no-wait or waiting
#define PRE_ABORT					true
#define ATOMIC_WORD					true 
// [SILO]
#define EPOCH_PERIOD				5 // ms
// [HSTORE]
// when set to true, hstore will not access the global timestamp.
// This is fine for single partition transactions. 
#define HSTORE_LOCAL_TS				false
// [VLL] 
#define TXN_QUEUE_SIZE_LIMIT		THREAD_CNT

/***********************************************/
// Logging
/***********************************************/

#define LOG_ALGORITHM LOG_BATCH
#define LOG_TYPE LOG_DATA
#define LOG_RAM_DISK				false
#define LOG_NO_FLUSH			 	false
#define LOG_RECOVER                 false
#define LOG_BATCH_TIME				10 // in ms
#define LOG_GARBAGE_COLLECT         false
#define LOG_BUFFER_SIZE				(1048576 * 50)	// in bytes
// For LOG_PARALLEL
#define LOG_PARALLEL_BUFFER_FILL	false 
#define NUM_LOGGER					1 // the number of loggers
#define LOG_PARALLEL_NUM_BUCKETS    4000000	// should equal the number of recovered txns
#define MAX_LOG_ENTRY_SIZE			16384 // in Bytes
#define LOG_FLUSH_INTERVAL 0
#define TRACK_WAR_DEPENDENCY		true // necessary only for logical or command logging.  
#define LOG_PARALLEL_REC_NUM_POOLS  THREAD_CNT 
#define LOG_CHUNK_SIZE  			(1048576 * 10)
#define NEXT_TXN_OPT				true
/***********************************************/
// Benchmark
/***********************************************/
// max number of rows touched per transaction
#define MAX_ROW_PER_TXN				1024
#define QUERY_INTVL 				1UL
#define MAX_TXNS_PER_THREAD (150000)
#define FIRST_PART_LOCAL 			true
#define MAX_TUPLE_SIZE				1024 // in bytes
// ==== [YCSB] ====
#define INIT_PARALLELISM			32 // 28
#define SYNTH_TABLE_SIZE 			(1024 * 1024 * 10)
#define ZIPF_THETA 					0.6 // .6
#define READ_PERC 					0.5
#define WRITE_PERC 					0.5
#define SCAN_PERC 					0
#define SCAN_LEN					20
#define PART_PER_TXN 				1
#define PERC_MULTI_PART				1
#define REQ_PER_QUERY				8 //2 // 2 // 16 
#define FIELD_PER_TUPLE				10
// ==== [TPCC] ====
// For large warehouse count, the tables do not fit in memory
// small tpcc schemas shrink the table size.
#define TPCC_SMALL					false // false // true // false
// Some of the transactions read the data but never use them. 
// If TPCC_ACCESS_ALL == fales, then these parts of the transactions
// are not modeled.
#define TPCC_ACCESS_ALL 			false 
#define WH_UPDATE					true
#define NUM_WH 						32 // 16 // 4 // 16
//
enum TPCCTxnType {TPCC_ALL, 
				TPCC_PAYMENT, 
				TPCC_NEW_ORDER, 
				TPCC_ORDER_STATUS, 
				TPCC_DELIVERY, 
				TPCC_STOCK_LEVEL};
extern TPCCTxnType 					g_tpcc_txn_type;

//#define TXN_TYPE					TPCC_ALL
#define PERC_PAYMENT 				0.5
#define PERC_NEWORDER				0.5
#define PERC_ORDERSTATUS			0.03
#define PERC_DELIVERY				0.294
#define PERC_STOCKLEVEL				0.03
#define FIRSTNAME_MINLEN 			8
#define FIRSTNAME_LEN 				16
#define LASTNAME_LEN 				16

#define DIST_PER_WARE				10

/***********************************************/
// TODO centralized CC management. 
/***********************************************/
#define MAX_LOCK_CNT				(20 * THREAD_CNT) 
#define TSTAB_SIZE                  50 * THREAD_CNT
#define TSTAB_FREE                  TSTAB_SIZE 
#define TSREQ_FREE                  4 * TSTAB_FREE
#define MVHIS_FREE                  4 * TSTAB_FREE
#define SPIN                        false

/***********************************************/
// Test cases
/***********************************************/
#define TEST_ALL					true
enum TestCases {
	READ_WRITE,
	CONFLICT
};
extern TestCases					g_test_case;
/***********************************************/
// DEBUG info
/***********************************************/
#define WL_VERB						true
#define IDX_VERB					false
#define VERB_ALLOC					true

#define DEBUG_LOCK					false
#define DEBUG_TIMESTAMP				false
#define DEBUG_SYNTH					false
#define DEBUG_ASSERT				false
#define DEBUG_CC					false //true

/***********************************************/
// Constant
/***********************************************/
// INDEX_STRUCT
#define IDX_HASH 					1
#define IDX_BTREE					2
// WORKLOAD
#define YCSB						1
#define TPCC						2
#define TEST						3
// Concurrency Control Algorithm
#define NO_WAIT						1
#define WAIT_DIE					2
#define DL_DETECT					3
#define TIMESTAMP					4
#define MVCC						5
#define HSTORE						6
#define OCC							7
#define TICTOC						8
#define SILO						9
#define VLL							10
#define HEKATON 					11
//Isolation Levels 
#define SERIALIZABLE				1
#define SNAPSHOT					2
#define REPEATABLE_READ				3
// TIMESTAMP allocation method.
#define TS_MUTEX					1
#define TS_CAS						2
#define TS_HW						3
#define TS_CLOCK					4
// Buffer size for logging
#define BUFFER_SIZE                 10

// Logging Algorithm
#define LOG_NO						1
#define LOG_SERIAL                  2
#define LOG_BATCH                   3
#define LOG_PARALLEL                4
#define LOG_TAURUS					5
#define LOG_PLOVER					6
// Logging type
#define LOG_DATA					1
#define LOG_COMMAND					2
/************************************/
// LOG TAURUS
/************************************/
#define EVICT_FREQ					10000
#define WITHOLD_LOG					false 
#define COMPRESS_LSN_LT				false
#define COMPRESS_LSN_LOG			false // false
#define PSN_FLUSH_FREQ				1000
#define LOCKTABLE_EVICT_BUFFER		30000
#define SOLVE_LIVELOCK				true
#define POOLSIZE_WAIT				2000 // if pool size is too small it might cause live lock.
#define RECOVER_BUFFER_PERC			(0.5)
#define TAURUS_RECOVER_BATCH_SIZE	(500)
#define ASYNC_IO					true
#define DECODE_AT_WORKER			false
#define UPDATE_SIMD (false)
#define SCAN_WINDOW 2
#define BIG_HASH_TABLE_MODE (true)
#define PROCESS_DEPENDENCY_LOGGER (false)
#define PARTITION_AWARE				false // this switch does not bring much benefit for YCSB
#define PER_WORKER_RECOVERY (false)
#define TAURUS_CHUNK (false)
#define TAURUS_CHUNK (false)
#define DISTINGUISH_COMMAND_LOGGING (false)
// big hash table mode means locktable evict buffer is infinite.
/************************************/
// LOG BATCH
/************************************/
#define MAX_NUM_EPOCH 100000
/************************************/
// LOG GENERAL
/************************************/
#define RECOVERY_FULL_THR			false // true // false // true
#define RECOVER_SINGLE_RECOVERLV	false // use only with a single queue

#define RECOVER_TAURUS_LOCKFREE		false  // Use the SPMC-Pool for each logger
#define POOL_SE_SPACE (8)

#define FLUSH_BLOCK_SIZE		1048576 // twice as best among 4096 40960 409600 4096000
#define READ_BLOCK_SIZE 419430400

#define AFFINITY true // true

/************************************/
// LOG PLOVER
/************************************/

#define PLOVER_NO_WAIT				true


/************************************/
// SIMD Config
/************************************/

#define G_NUM_LOGGER g_num_logger
#define MAX_LOGGER_NUM_SIMD 16
#define SIMD_PREFIX __m512i // __m256i
#define MM_MAX _mm512_max_epu32 //_mm256_max_epu32
#define MM_MASK __mmask16
#define MM_CMP _mm512_cmp_epu32_mask
#define MM_EXP_LOAD _mm512_maskz_expandloadu_epi32
#define MM_INTERLEAVE_MASK 0x5555
#define NUM_CORES_PER_SLOT 18
#define NUMA_NODE_NUM 2
#define HYPER_THREADING_FACTOR 2

/************************************/
#define OUTPUT_AVG_RATIO 0.9

#include "config-assertions.h"

#define MM_MALLOC(x,y) _mm_malloc(x, ALIGN_SIZE)
#define MM_FREE(x,y) _mm_free(x)
#include "numa.h"
#define NUMA_MALLOC(x,y) numa_alloc_onnode(x, ((y) % g_num_logger) % NUMA_NODE_NUM)
#define NUMA_FREE(x,y) numa_free(x, y)

#if WORKLOAD == YCSB
#define MALLOC NUMA_MALLOC
#define FREE NUMA_FREE
#else
// TPC-C workloads are generating too many memory allocations.
// Each numa_alloc_onnode will create a separate mmap. It could be disastrous
#define MALLOC MM_MALLOC
#define FREE MM_FREE
#endif

///////// MISC
#define WORK_IN_PROGRESS true

#endif


=Worker Thread=
    Throughput:                   13829.7
    MaxThr:                       13829.7
    PerThdThr:                    13893.5
    run_time:                     373.249 (62.2082,62.2046,62.2066,62.2014,62.2208,62.2075,0,)
    log_bytes:                    2.05251 (0,0,0,0,0,0,2.05251,)
    log_dep_size:                 0 (0,0,0,0,0,0,0,)
    log_total_size:               78.3547 (13.2251,13.6213,13.0296,12.9925,12.7165,12.7699,0,)
    latency:                      3.14672e+06 (544834,539199,500187,533847,490394,538254,0,)

    num_commits:                  864285 (150000,147487,136517,147465,135115,147701,0,)
    num_async_commits:            841936 (145942,143649,133063,143499,130725,145058,0,)
    num_aborts:                   2.90171e+07 (4856262,5025941,4858590,4848065,4714889,4713350,0,)
    num_aborts_logging:           2.90171e+07 (4856257,5025939,4858588,4848056,4714887,4713349,0,)
    num_log_records:              864285 (150000,147487,136517,147465,135115,147701,0,)
    log_data:                     0 (0,0,0,0,0,0,0,)
    num_latency_count:            841936 (145942,143649,133063,143499,130725,145058,0,)
    num_raw_edges:                0 (0,0,0,0,0,0,0,)
    num_waw_edges:                0 (0,0,0,0,0,0,0,)
    num_war_edges:                0 (0,0,0,0,0,0,0,)
    int_num_log:                  0 (0,0,0,0,0,0,0,)
    int_debug_get_next:           0 (0,0,0,0,0,0,0,)
    int_debug1:                   0 (0,0,0,0,0,0,0,)
    int_debug2:                   1.96967e+09 (0,0,0,0,0,0,1969669632,)
    int_debug3:                   1910 (0,0,0,0,0,0,1910,)
    int_debug4:                   0 (0,0,0,0,0,0,0,)
    int_debug5:                   0 (0,0,0,0,0,0,0,)
    int_debug6:                   0 (0,0,0,0,0,0,0,)
    int_debug7:                   0 (0,0,0,0,0,0,0,)
    int_debug8:                   0 (0,0,0,0,0,0,0,)
    int_debug9:                   0 (0,0,0,0,0,0,0,)
    int_debug10:                  0 (0,0,0,0,0,0,0,)
    int_psnflush:                 0 (0,0,0,0,0,0,0,)
    int_flush_time_interval:      0 (0,0,0,0,0,0,0,)
    int_flush_half_full:          1909 (0,0,0,0,0,0,1909,)
    int_rec_fail_to_insert:       0 (0,0,0,0,0,0,0,)
    int_num_get_row:              0 (0,0,0,0,0,0,0,)
    int_locktable_volume:         0 (0,0,0,0,0,0,0,)
    int_aux_bytes:                0 (0,0,0,0,0,0,0,)
    int_nonzero:                  0 (0,0,0,0,0,0,0,)
    num_log_entries:              2.98814e+07 (5006257,5173426,4995105,4995521,4850002,4861050,0,)
    time_ts_alloc:                0 -nan -nan% 0 (0,0,0,0,0,0,0,)
    time_man:                     90.5437 15.0906 53.3681% 104761 (15.0353,15.768,15.0913,15.0625,14.8854,14.7011,0,)
    time_cleanup:                 41.2706 6.87843 24.3257% 47751.1 (6.82754,7.16293,6.87783,6.95874,6.71324,6.73032,0,)
    time_txn:                     0 -nan -nan% 0 (0,0,0,0,0,0,0,)
    time_index:                   13.938 2.32299 8.2153% 16126.6 (2.32434,2.3897,2.30782,2.30731,2.30909,2.2997,0,)
    time_log:                     0.596863 0.0994772 0.351802% 690.586 (0.104409,0.0979967,0.0910379,0.106318,0.0911503,0.105951,0,)
    time_io:                      60.4534 60.4534 213.794% 69946.1 (0,0,0,0,0,0,60.4534,)
    time_wait_io:                 0 -nan -nan% 0 (0,0,0,0,0,0,0,)
    time_phase1_add_graph:        0 -nan -nan% 0 (0,0,0,0,0,0,0,)
    time_recover_txn:             0 -nan -nan% 0 (0,0,0,0,0,0,0,)
    time_lv_overhead:             0 -nan -nan% 0 (0,0,0,0,0,0,0,)
    time_state_malloc:            0 -nan -nan% 0 (0,0,0,0,0,0,0,)
    time_phase1_1:                13.8853 2.31422 8.18428% 16065.7 (2.31522,2.3948,2.3669,2.25,2.28536,2.27306,0,)
    time_phase1_2:                19.1624 3.19373 11.2947% 22171.3 (3.21328,3.28699,3.16593,3.17687,3.15147,3.16782,0,)
    time_phase2:                  26.7807 4.46346 15.7851% 30986 (4.46071,4.66816,4.41189,4.44338,4.4272,4.36939,0,)
    time_phase3:                  22.9892 3.83154 13.5503% 26599.1 (3.85788,3.97544,3.82636,3.81798,3.7995,3.71208,0,)
    time_phase1_1_raw:            30.1333 5.02222 17.7612% 34865.1 (5.05772,5.24332,5.01672,4.95563,4.98428,4.87567,0,)
    time_phase1_2_raw:            8.04555 1.34093 4.7422% 9308.91 (1.33345,1.35685,1.30916,1.44128,1.29961,1.30521,0,)
    time_phase2_raw:              3.84897 0.641495 2.26865% 4453.36 (0.650478,0.662868,0.636209,0.631544,0.635621,0.632249,0,)
    time_phase3_raw:              0 -nan -nan% 0 (0,0,0,0,0,0,0,)
    time_recover_full:            0 -nan -nan% 0 (0,0,0,0,0,0,0,)
    time_recover1:                0 -nan -nan% 0 (0,0,0,0,0,0,0,)
    time_recover2:                0 -nan -nan% 0 (0,0,0,0,0,0,0,)
    time_recover3:                0 -nan -nan% 0 (0,0,0,0,0,0,0,)
    time_recover4:                0 -nan -nan% 0 (0,0,0,0,0,0,0,)
    time_recover5:                0 -nan -nan% 0 (0,0,0,0,0,0,0,)
    time_recover6:                0 -nan -nan% 0 (0,0,0,0,0,0,0,)
    time_recover7:                0 -nan -nan% 0 (0,0,0,0,0,0,0,)
    time_recover8:                0 -nan -nan% 0 (0,0,0,0,0,0,0,)
    time_debug_get_next:          0 -nan -nan% 0 (0,0,0,0,0,0,0,)
    time_debug0:                  0 -nan -nan% 0 (0,0,0,0,0,0,0,)
    time_debug1:                  0 -nan -nan% 0 (0,0,0,0,0,0,0,)
    time_debug2:                  0 -nan -nan% 0 (0,0,0,0,0,0,0,)
    time_debug3:                  0 -nan -nan% 0 (0,0,0,0,0,0,0,)
    time_debug4:                  0 -nan -nan% 0 (0,0,0,0,0,0,0,)
    time_debug5:                  0.603612 0.100602 0.35578% 698.395 (0.101979,0.10406,0.0995819,0.101279,0.0985645,0.0981474,0,)
    time_debug6:                  0 -nan -nan% 0 (0,0,0,0,0,0,0,)
    time_debug7:                  0 -nan -nan% 0 (0,0,0,0,0,0,0,)
    time_debug8:                  0 -nan -nan% 0 (0,0,0,0,0,0,0,)
    time_debug9:                  0 -nan -nan% 0 (0,0,0,0,0,0,0,)
    time_debug10:                 0 -nan -nan% 0 (0,0,0,0,0,0,0,)
    time_debug11:                 24.1339 4.02232 14.225% 27923.6 (3.92297,4.1151,4.11306,4.09076,3.96134,3.93067,0,)
    time_debug12:                 161.844 26.974 95.394% 187258 (27.0168,27.9973,26.851,27.0113,26.5995,26.3683,0,)
    time_debug13:                 0 -nan -nan% 0 (0,0,0,0,0,0,0,)
    time_debug14:                 0 -nan -nan% 0 (0,0,0,0,0,0,0,)
    time_debug15:                 35.229 5.8715 20.7646% 40760.8 (5.81139,6.13032,5.85562,5.95707,5.7173,5.75727,0,)
    time_rec_loop_tryRead:        0 -nan -nan% 0 (0,0,0,0,0,0,0,)
    time_rec_finding_empty_slot:  0 -nan -nan% 0 (0,0,0,0,0,0,0,)
    time_silo_validate1:          7.65691 1.27615 4.51312% 8859.24 (1.27698,1.30982,1.25978,1.27072,1.26225,1.27735,0,)
    time_silo_validate2:          2.98359 0.497264 1.75858% 3452.09 (0.495004,0.513368,0.497535,0.493466,0.492831,0.491382,0,)
    time_silo_validate3:          7.29288 1.21548 4.29856% 8438.05 (1.2037,1.24818,1.23964,1.21061,1.2001,1.19065,0,)
    time_silo_validate4:          0.522483 0.0870805 0.307961% 604.526 (0.0860526,0.0892745,0.0871809,0.0877732,0.0861362,0.0860656,0,)
    time_silo_validate5:          20.6943 3.44905 12.1976% 23943.8 (3.43233,3.54337,3.45568,3.43588,3.41021,3.41682,0,)
    time_silo_validate6:          1.25909e-06 2.09848e-07 7.42132e-07% 0.0014568 (3.22727e-07,7.54545e-08,8.36364e-08,6.40909e-07,1.09091e-07,2.72727e-08,0,)
    time_silo_validate7:          13.2853 2.21422 7.83062% 15371.5 (2.16823,2.37418,2.19964,2.30842,2.11239,2.12248,0,)
    time_silo_validate8:          0.817707 0.136284 0.481972% 946.108 (0.140374,0.137836,0.124666,0.147044,0.124796,0.142991,0,)
    time_silo_validate9:          1.24935 0.208225 0.73639% 1445.53 (0.210832,0.212781,0.200306,0.212772,0.194688,0.217972,0,)
    time_locktable_get:           16.4002 2.73336 9.66658% 18975.4 (2.59474,2.80815,2.84661,2.59029,2.69833,2.86207,0,)
    time_locktable_get_validation:0 -nan -nan% 0 (0,0,0,0,0,0,0,)
    time_locktable_release:       0 -nan -nan% 0 (0,0,0,0,0,0,0,)
    time_get_row_before:          8.509 1.41817 5.01536% 9845.13 (1.43087,1.45912,1.40504,1.40721,1.40548,1.40126,0,)
    time_get_row_after:           32.2624 5.37707 19.0161% 37328.4 (5.48766,5.70242,5.2781,5.42153,5.36087,5.01181,0,)
    time_log_create:              10.4246 1.73743 6.14444% 12061.5 (1.68335,1.89649,1.67405,1.8523,1.6574,1.66099,0,)
    time_log_serialLogTxn:        0 -nan -nan% 0 (0,0,0,0,0,0,0,)
    time_cleanup_1:               0.534608 0.0891013 0.315108% 618.555 (0.0878855,0.0910131,0.0881383,0.0896233,0.0879804,0.0899669,0,)
    time_cleanup_2:               2.1713 0.361884 1.27981% 2512.25 (0.36453,0.379966,0.363418,0.354296,0.363659,0.345434,0,)
    time_insideSLT1:              0.353828 0.0589713 0.208553% 409.388 (0.0634328,0.0563645,0.0525466,0.0638101,0.0530388,0.0646349,0,)
    time_insideSLT2:              0.442016 0.0736694 0.260533% 511.424 (0.0783262,0.0714051,0.0664434,0.0789759,0.0669077,0.079958,0,)
    time_STLother:                0 -nan -nan% 0 (0,0,0,0,0,0,0,)
    time_logging_thread:          62.4949 62.4949 221.014% 72308.3 (0,0,0,0,0,0,62.4949,)
    int_serialLogFail:            0 (0,0,0,0,0,0,0,)